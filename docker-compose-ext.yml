version: '3.9'
services:
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:?err}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:?err}
      PGADMIN_CONFIG_SERVER_MODE: 'True'
      PGADMIN_LISTEN_PORT: ${PGADMIN_PORT:?err}
      #PGADMIN_SERVER_JSON_FILE: servers.json
      # Application log level - one of:
      # CRITICAL 50, ERROR 40, WARNING 30, SQL 25, INFO 20, DEBUG 10, NOTSET 0
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 50
      PGADMIN_CONFIG_FILE_LOG_LEVEL: 10
      CONSOLE_LOG_FORMAT: '%(asctime)s: %(levelname)s\t%(name)s:\t%(message)s'
      FILE_LOG_FORMAT: '%(asctime)s: %(levelname)s\t%(name)s:\t%(message)s'
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'True'
      #PGADMIN_ENABLE_TLS: 'True'
      LOG_FILE: '/var/log/pgadmin/pgadmin4.log'
      TZ: ${TIME_ZONE}
    networks:
      - app_network
    ports:
      - "${PGADMIN_PORT:?err}:${PGADMIN_PORT:?err}"
    expose:
      - "${PGADMIN_PORT:?err}"
    depends_on:
      - postgresql
    tty: true
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.purpose==database"
      restart_policy:
        condition: on-failure
    volumes:
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json
#      - ./config/pgadmin/.pgpass:/var/lib/pgadmin/storage/pgadmin4_pgadmin.org/.pgpass
      - ./data/pgadmin:/var/lib/pgadmin/storage
      - ./log/pgadmin:/var/log/pgadmin/
  redis:
    image: bitnami/redis
    restart: always
    secrets:
      - redis-password
    environment:
#      ALLOW_EMPTY_PASSWORD: "yes"
      REDIS_PASSWORD_FILE: /run/secrets/redis-password
      REDIS_DISABLE_COMMANDS: FLUSHDB,FLUSHALL,CONFIG
      REDIS_PORT_NUMBER: ${REDIS_PORT:?err}
      TZ: ${TIME_ZONE}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 20s
      timeout: 10s
      retries: 10
    tty: true
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.purpose==web"
      restart_policy:
        condition: on-failure
    volumes:
      - ./data/redis:/bitnami/redis/data
    networks:
      - app_network
    expose:
      - "${REDIS_PORT:?err}"
  elasticsearch:
    #image: elasticsearch:6.8.16
    #image: elasticsearch:7.14.0
    image: bitnami/elasticsearch:6
    restart: always
    environment:
      ELASTICSEARCH_PORT_NUMBER: ${ELASTICSEARCH_PORT:?err}
      ELASTICSEARCH_NODE_PORT_NUMBER: ${ELASTICSEARCH_NODE_PORT:?err}
      BITNAMI_DEBUG: "false"
      ELASTICSEARCH_CLUSTER_NAME: ${APP_NAME:?err}-elastic-cluster
      ELASTICSEARCH_HEAP_SIZE: 512m
      bootstrap.memory_lock: "true"
#      ES_JAVA_OPTS: "-Xms1024m -Xmx1024m -Des.enforce.bootstrap.checks=true"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
#        - xpack.monitoring.enabled=true
#        - xpack.monitoring.elasticsearch.collection.enabled=true
      TZ: ${TIME_ZONE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
#      mem_limit: 1g
    cap_add:
      - IPC_LOCK
    healthcheck:
#      test: [ "CMD", "curl","-s" ,"-f", "-u", "elasticsearch", "http://elasticsearch:${ELASTICSEARCH_PORT:?err}/_cat/health" ]
#      test: curl -u elastic:elastic -s -f elasticsearch:${ELASTICSEARCH_PORT:?err}/_cat/health >/dev/null || exit 1
      test: ["CMD-SHELL", "curl --silent --fail localhost:${ELASTICSEARCH_PORT:?err}/_cluster/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
    tty: true
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.purpose==database"
      restart_policy:
        condition: on-failure
      labels:
        co.elastic.metrics/module: "elasticsearch"
        co.elastic.metrics/hosts: "http://elasticsearch:${ELASTICSEARCH_PORT:?err}"
        co.elastic.metrics/metricsets: "node_stats,node"
        co.elastic.metrics/xpack.enabled: "true"
    volumes:
      # for vanilla
#      - ./data/elasticsearch:/usr/share/elasticsearch/data
#     for bitnami
      - ./data/elasticsearch:/bitnami/elasticsearch/data
    networks:
      - app_network
    expose:
      - "${ELASTICSEARCH_PORT:?err}"
  django:
    secrets:
      - redis-password
    environment:
#      CACHE_URL is defined in docker-entrypoint.sh, it is using in settings/production.py
#      CACHE_URL: redis://default:${REDIS_PASSWORD:?err}@redis:6379
      REDIS_PORT_NUMBER: ${REDIS_PORT:?err}
      ELASTICSEARCH_PORT_NUMBER: ${ELASTICSEARCH_PORT:?err}
      REDIS_PASSWORD_FILE: /run/secrets/redis-password
      ELASTICSEARCH_ENDPOINT: elasticsearch
  nginx:
    environment:
      PGADMIN_PORT: ${PGADMIN_PORT:?err}
volumes:
  data:
    driver: local
secrets:
  redis-password:
    file: secrets/redis_password.txt
networks:
  app_network: