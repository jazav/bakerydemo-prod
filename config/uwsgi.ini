[uwsgi]
; take a look https://www.youtube.com/watch?v=p6R1h2Nn468
;https://www.techatbloomberg.com/blog/configuring-uwsgi-production-deployment/

master = true
enable-threads = true               ; By default, the Python plugin doesn't initialize the GIL. This means your
                                    ; app-generated threads will not run.
                                    ; This "strange" default behaviour is for performance reasons, no shame in that.
vacuum = true                       ; Delete HTTP sockets, pidfiles, or admin FIFOs during shutdown
single-interpreter = true           ; Do not use multiple interpreters (where available).
                                    ; Some of the supported languages (such as Python) have the concept
                                    ; of “multiple interpreters”.
                                    ; This feature allows you to isolate apps living in the same process.
                                    ; If you do not want this kind of feature use this option.
                                    ; The reason of that is there are reports on some c extensions
                                    ; that do not cooperate well w/ them.
die-on-term = true                  ; Shutdown when receiving SIGTERM (default is respawn)
need-app = true                     ; Exit if no app can be loaded

; Option 1
logdate = %%Y-%%m-%%d %%H:%%M:%%S
logformat = %(ftime) %(method) %(var.REQUEST_SCHEME)://%(host)%(uri) %(proto) %(status) %(size)

;OR Apache-compatible logs
;logformat = %(addr) - %(user) [%(ltime)] "%(method) %(uri) %(proto)" %(status) %(size) "%(referer)" "%(uagent)"

logto = /var/log/uwsgi/uwsgi.log
log-reopen = true
logformat-strftime = true
;daemonize = /srv/example_net/var/log/uwsgi.log
log-maxsize = 200000000 ; That way you limit the log file to 200 MB and rotate it once
log-backupname = /var/log/uwsgi/uwsgi_backup.log

; Option 2
;logger = file:logfile=/var/log/uwsgi/uwsgi.log,maxsize=2000000000
;logger = internalservererror file:/var/log/uwsgi/errors.log
;disable-logging = true               ; Disable built-in logging

; Alternative - start
; Option 3
;logger = uwsgilog stdio
;logger-req = stdio
;log-route = uwsgilog ^((?!{).)*$
;log-encoder = json:uwsgilog {"timestamp":${strftime:%%d-%%m-%%Y %%H:%%M:%%S}, "source": "uWSGI", "level":"INFO", "message":"${msg}"}
;log-req-encoder = nl

;logger = application stdio
;log-route = application {
;log-encoder = format:application ${msg}
;log-req-encoder = json {"timestamp":${strftime:%%d-%%m-%%Y %%H:%%M:%%S}, "source": "request", "level":"INFO", "message":"${msg}"}

; Alternative - end

log-4xx = true                      ; but log 4xx's anyway
log-5xx = true                      ; and 5xx's

harakiri = 60                       ; forcefully kill workers after 60 seconds
harakiri-verbose = true
;py-callos-afterfork = true          ; allow workers to trap signals
                                     ; By default, workers are not able to receive OS signals
                                     ; This flag will allow them to receive signals such as signal.alarm
                                     ; This is necessary if you intend on using the signals module in a worker process

max-requests = 1000                 ; Restart workers after this many requests
max-worker-lifetime = 3600          ; Restart workers after this many seconds (here is every 60m)
reload-on-rss = 2048                ; Restart workers after this much resident memory
worker-reload-mercy = 60            ; How long to wait before forcefully killing workers

cheaper-algo = busyness
processes = 128                     ; Maximum number of workers allowed, it has the same meaning as *workers* param
;threads = 4                         ; Number of threads per worker
cheaper = 8                         ; Minimum number of workers allowed
cheaper-initial = 16                ; Workers created at startup
cheaper-overload = 1                ; Length of a cycle in seconds
cheaper-step = 16                   ; How many workers to spawn at a time

cheaper-busyness-multiplier = 30    ; How many cycles to wait before killing workers
cheaper-busyness-min = 20           ; Below this threshold, kill workers (if stable for multiplier cycles)
cheaper-busyness-max = 70           ; Above this threshold, spawn new workers
cheaper-busyness-backlog-alert = 16 ; Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-step = 2   ; How many emergency workers to create if there are too many requests in the queue

; if we need set envs for Django
; for-readline = yourfile
;  env = %(_)
; endfor =

; Django-related settings
chdir = /code
home = $(APP_NAME)/
wsgi-file = $(APP_NAME)/wsgi.py
virtualenv = /venv
http = :$(DJANGO_DOCKER_PORT)

http-auto-chunked = true   ; Automatically transform output to chunked encoding during HTTP 1.1 keepalive (if needed)
http-keepalive = true      ; Support HTTP keepalive (non-pipelined) requests (requires backend support).

http-timeout = 75          ; Set internal http socket timeout
uid = 1000
gid = 2000

static-map = /media/=/code/$(APP_NAME)/media/ ; uWSGI uploaded media file serving configuration
; AZ  START
; define socket to interchange between uwsgi and nginx
; unix socket
;socket="/tmp/uwsgi.sock"
socket = :$(NGINX_UWSGI_PORT)        ; tcp socket

lazy-apps = true

; Set lazy mode (load apps in workers instead of master).
; This option may have memory usage implications as Copy-on-Write semantics can not be used.
; When lazy is enabled, only workers will be reloaded by uWSGI’s reload signals; the master will remain alive. As such,
; uWSGI configuration changes are not picked up on reload by the master
lazy = true

thunder-lock = true
buffer-size = 65535
no-defer-accept = true
auto-procname = true            ; Automatically set process name to something meaningful.