version: '3.9'

services:
  postgresql:
    #    image: postgres:13.3
    image: bitnami/postgresql:14
    #    restart: always not appropriate for swarm
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 20s
      timeout: 30s
      retries: 5
    secrets:
      - dbuser-password
      - postgres-password
    #    configs:
    #      - source: config-yml
    #        target: /configs/config.yml
    #        uid: '103'
    #        gid: '103'
    #        mode: 0440
    networks:
      - app_network
    environment:
      #      * for vanilla
      #      POSTGRES_DB: ${POSTGRES_DB}
      #      POSTGRES_USER: ${POSTGRES_USER}
      #      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      #      * for bitnami
      POSTGRESQL_USERNAME: ${POSTGRES_USER?err}
      POSTGRESQL_PASSWORD_FILE: /run/secrets/dbuser-password
      POSTGRESQL_DATABASE: ${POSTGRES_DB?err}
      POSTGRESQL_POSTGRES_PASSWORD_FILE: /run/secrets/postgres-password
      POSTGRESQL_LOG_LINE_PREFIX: '%t [%p]: [%l-1] '
      #      '%t [%p]: [ %l-1 ] user=%u,db=%d '
      #      '%t [%p]: [ %l-1 ] user=%u,db=%d,remote=%r '
      POSTGRESQL_LOG_TIMEZONE: ${TIME_ZONE}
      TZ: ${TIME_ZONE}
      LANG: 'en_US.UTF-8'
      LANGUAGE: 'en_US:en'
    expose:
      - "${POSTGRES_PORT?err}"
    # publish this port for test env only using PyCharm
    # WE MUST comment it in production
    ports:
      - "${POSTGRES_PORT?err}:${POSTGRES_PORT?err}"
    tty: true
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
#        constraints:
#          - "node.labels.purpose==database"
      #      resources:
      #        limits:
      #          cpus: '0.50'
      #          memory: 50M
      #        reservations:
      #          cpus: '0.25'
      #          memory: 20M
      restart_policy:
        condition: on-failure
    volumes:
      #  path to vanilla postgres
      #      - ./postgresql-data:/var/lib/postgresql/data
      #  path to bitnami postgres
      - ./data/postgresql:/bitnami/postgresql
      - ./log/postgresql:/opt/bitnami/postgresql/logs
  #      - ../../postgresql-conf/:/bitnami/postgresql/conf
  django:
    #   * for Dev
#    build:
#      args:
#        PROJECT_ARG: ${APP_NAME}
#      context: ../../
#      dockerfile: docker/all-in-one/Dockerfile
    #    * for Prod (Swarm)
    image: alexzolotarev/bakerydemodjango:0.1.0
    #    restart: on-failure not appropriate for swarm
    secrets:
      - dbuser-password
      - django-secret
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:${DJANGO_DOCKER_PORT?err}/"
      interval: 20s
      timeout: 30s
      retries: 3
      start_period: 60s
    networks:
      - app_network
    environment:
      POSTGRES_USER: ${POSTGRES_USER?err}
      DBUSER_PASSWORD_FILE: /run/secrets/dbuser-password
      POSTGRES_DB: ${POSTGRES_DB?err}
      POSTGRES_PORT: ${POSTGRES_PORT?err}
      #      DATABASE_URL is defined in docker-entrypoint.sh, it is using in settings/production.py
      #      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:${POSTGRES_PORT}/${POSTGRES_DB}
      #      CACHE_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      #      ELASTICSEARCH_ENDPOINT: elasticsearch
      APP_NAME: ${APP_NAME?err}
      #      VIRTUAL_PORT: ${NGINX_UWSGI_PORT?err}
      #      # for proxy
      #      VIRTUAL_HOST: ${APP_NAME}
      # uwsgi, http or https - https://hub.docker.com/r/nginxproxy/nginx-proxy
      VIRTUAL_PROTO: uwsgi
      #ENABLE_ACME: 'true'
      #      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY?err}
      DJANGO_SECRET_KEY: /run/secrets/django-secret
      #      DJANGO_LOG_LEVEL: "DEBUG"
      #     this TZ has to be the same as one in Django's settings
      TZ: ${TIME_ZONE}
      DJANGO_DOCKER_PORT: ${DJANGO_DOCKER_PORT?err}
      NGINX_UWSGI_PORT: ${NGINX_UWSGI_PORT?err}
    deploy:
      replicas: 0
      placement:
        max_replicas_per_node: 1
#        constraints:
#          - "node.labels.purpose==web"
      #      resources:
      #        limits:
      #          cpus: '0.50'
      #          memory: 50M
      #        reservations:
      #          cpus: '0.25'
      #          memory: 20M
      restart_policy:
        condition: on-failure
    volumes:
      - media-root:/code/${APP_NAME}/media/images
      - ../../${APP_NAME?err}/media/original_images:/code/${APP_NAME?err}/media/original_images
      - ./config/uwsgi.ini:/code/uwsgi.ini
      # we need it to get static files (css,js)
      - web-root:/code/${APP_NAME?err}
      - ./log/uwsgi:/var/log/uwsgi
    #      - tmp:/tmp
    expose:
      - "${NGINX_UWSGI_PORT?err}"
    ports:
      - "${DJANGO_HOST_PORT?err}:${DJANGO_DOCKER_PORT?err}"
    logging:
      options:
        max-file: "5"
        max-size: "5m"
    entrypoint: [ "/code/docker-entrypoint.sh" ]
    command: [ "/venv/bin/uwsgi", "--strict", "--show-config", "./uwsgi.ini" ]
  nginx:
    image: nginx
#    restart: on-failure
    environment:
      NGINX_ENVSUBST_TEMPLATE_DIR: /etc/nginx/templates
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: .template
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx/conf.d
      APP_NAME: ${APP_NAME?err}
      APP_URL: ${APP_URL?err}
      NGINX_UWSGI_PORT: ${NGINX_UWSGI_PORT?err}
      NGINX_HOST_PORT: ${NGINX_HOST_PORT?err}
      NGINX_DOCKER_PORT: ${NGINX_DOCKER_PORT?err}
      VISUALIZER_HOST_PORT: ${VISUALIZER_HOST_PORT?err}
      TZ: ${TIME_ZONE}
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 20s
      timeout: 10s
      retries: 3
    networks:
      - app_network
    ports:
      - "${NGINX_HOST_PORT?err}:${NGINX_DOCKER_PORT?err}"
    logging:
      options:
        max-file: "5"
        max-size: "5m"
    volumes:
      - ./config/app-nginx.conf.template:/etc/nginx/templates/app-nginx.conf.template
      - ./secrets/swarm.htpasswd:/etc/nginx/conf.d/swarm.htpasswd
      - media-root:/code/${APP_NAME}/media/images
      # we need it to get static files (images)
      - web-root:/code/${APP_NAME}
      - ./log/nginx:/var/log/nginx/
    # we need it uncomment to unix sock only
    ##      - tmp:/tmp:ro
    deploy:
      replicas: 0
      placement:
        max_replicas_per_node: 1
#        constraints:
#          - "node.labels.purpose==web"
      #      resources:
      #        limits:
      #          cpus: '0.50'
      #          memory: 50M
      #        reservations:
      #          cpus: '0.25'
      #          memory: 20M
      restart_policy:
        condition: on-failure
volumes:
  web-root:
  media-root:
  data:
  log:
#  tmp:
#    driver: local
secrets:
  dbuser-password:
    file: secrets/dbuser_password.txt
  #    external: true
  postgres-password:
    file: secrets/postgres_password.txt
  #    external: true
  django-secret:
    file: secrets/django_secret.txt
#    openssl rand -base64 40 | docker secret create django-secret -
#    external: true
#configs:
#  config-yml:
#    external: true
networks:
  app_network: